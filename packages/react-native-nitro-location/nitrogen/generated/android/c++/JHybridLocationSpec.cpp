///
/// JHybridLocationSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridLocationSpec.hpp"

// Forward declaration of `HybridLocationResultSpec` to properly resolve imports.
namespace margelo::nitro::nitro_location { class HybridLocationResultSpec; }
// Forward declaration of `Accuracy` to properly resolve imports.
namespace margelo::nitro::nitro_location { enum class Accuracy; }

#include <future>
#include <memory>
#include "HybridLocationResultSpec.hpp"
#include <NitroModules/JPromise.hpp>
#include "JHybridLocationResultSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include <optional>
#include "Accuracy.hpp"
#include "JAccuracy.hpp"

namespace margelo::nitro::nitro_location {

  jni::local_ref<JHybridLocationSpec::jhybriddata> JHybridLocationSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridLocationSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridLocationSpec::initHybrid),
    });
  }

  size_t JHybridLocationSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::future<std::shared_ptr<margelo::nitro::nitro_location::HybridLocationResultSpec>> JHybridLocationSpec::getCurrentPosition(std::optional<Accuracy> accuracy) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JAccuracy> /* accuracy */)>("getCurrentPosition");
    auto result = method(_javaPart, accuracy.has_value() ? JAccuracy::fromCpp(accuracy.value()) : nullptr);
    return [&]() {
      auto promise = std::make_shared<std::promise<std::shared_ptr<margelo::nitro::nitro_location::HybridLocationResultSpec>>>();
      result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& boxedResult) {
        auto result = jni::static_ref_cast<JHybridLocationResultSpec::javaobject>(boxedResult);
        promise->set_value(JNISharedPtr::make_shared_from_jni<JHybridLocationResultSpec>(jni::make_global(result)));
      });
      result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JString>& message) {
        std::runtime_error error(message->toStdString());
        promise->set_exception(std::make_exception_ptr(error));
      });
      return promise->get_future();
    }();
  }

} // namespace margelo::nitro::nitro_location
