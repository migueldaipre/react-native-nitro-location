///
/// JHybridLocationCoordsSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridLocationCoordsSpec.hpp"



#include <optional>

namespace margelo::nitro::nitro_location {

  jni::local_ref<JHybridLocationCoordsSpec::jhybriddata> JHybridLocationCoordsSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridLocationCoordsSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridLocationCoordsSpec::initHybrid),
    });
  }

  size_t JHybridLocationCoordsSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::optional<double> JHybridLocationCoordsSpec::getAccuracy() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JDouble>()>("getAccuracy");
    auto result = method(_javaPart);
    return result != nullptr ? std::make_optional(result->value()) : std::nullopt;
  }
  std::optional<double> JHybridLocationCoordsSpec::getAltitude() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JDouble>()>("getAltitude");
    auto result = method(_javaPart);
    return result != nullptr ? std::make_optional(result->value()) : std::nullopt;
  }
  double JHybridLocationCoordsSpec::getLatitude() {
    static const auto method = _javaPart->getClass()->getMethod<double()>("getLatitude");
    auto result = method(_javaPart);
    return result;
  }
  double JHybridLocationCoordsSpec::getLongitude() {
    static const auto method = _javaPart->getClass()->getMethod<double()>("getLongitude");
    auto result = method(_javaPart);
    return result;
  }

  // Methods
  

} // namespace margelo::nitro::nitro_location
