///
/// JAccuracy.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Accuracy.hpp"

namespace margelo::nitro::nitro_location {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "Accuracy" and the the Kotlin enum "Accuracy".
   */
  struct JAccuracy final: public jni::JavaClass<JAccuracy> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitro_location/Accuracy;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum Accuracy.
     */
    [[maybe_unused]]
    Accuracy toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<Accuracy>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JAccuracy> fromCpp(Accuracy value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldLOWEST = clazz->getStaticField<JAccuracy>("LOWEST");
      static const auto fieldLOW = clazz->getStaticField<JAccuracy>("LOW");
      static const auto fieldBALANCED = clazz->getStaticField<JAccuracy>("BALANCED");
      static const auto fieldHIGH = clazz->getStaticField<JAccuracy>("HIGH");
      static const auto fieldHIGHEST = clazz->getStaticField<JAccuracy>("HIGHEST");
      static const auto fieldBESTFORNAVIGATION = clazz->getStaticField<JAccuracy>("BESTFORNAVIGATION");
      
      switch (value) {
        case Accuracy::LOWEST:
          return clazz->getStaticFieldValue(fieldLOWEST);
        case Accuracy::LOW:
          return clazz->getStaticFieldValue(fieldLOW);
        case Accuracy::BALANCED:
          return clazz->getStaticFieldValue(fieldBALANCED);
        case Accuracy::HIGH:
          return clazz->getStaticFieldValue(fieldHIGH);
        case Accuracy::HIGHEST:
          return clazz->getStaticFieldValue(fieldHIGHEST);
        case Accuracy::BESTFORNAVIGATION:
          return clazz->getStaticFieldValue(fieldBESTFORNAVIGATION);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::runtime_error("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitro_location
