///
/// HybridLocationSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridLocationResultSpec` to properly resolve imports.
namespace margelo::nitro::nitro_location { class HybridLocationResultSpec; }
// Forward declaration of `Accuracy` to properly resolve imports.
namespace margelo::nitro::nitro_location { enum class Accuracy; }

#include <future>
#include <memory>
#include "HybridLocationResultSpec.hpp"
#include <optional>
#include "Accuracy.hpp"

namespace margelo::nitro::nitro_location {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Location`
   * Inherit this class to create instances of `HybridLocationSpec` in C++.
   * @example
   * ```cpp
   * class HybridLocation: public HybridLocationSpec {
   *   // ...
   * };
   * ```
   */
  class HybridLocationSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridLocationSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridLocationSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual std::future<std::shared_ptr<margelo::nitro::nitro_location::HybridLocationResultSpec>> getCurrentPosition(std::optional<Accuracy> accuracy) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Location";
  };

} // namespace margelo::nitro::nitro_location
