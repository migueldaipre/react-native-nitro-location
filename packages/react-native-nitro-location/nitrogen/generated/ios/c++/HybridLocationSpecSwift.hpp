///
/// HybridLocationSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridLocationSpec.hpp"

// Forward declaration of `HybridLocationSpecCxx` to properly resolve imports.
namespace NitroLocation { class HybridLocationSpecCxx; }

// Forward declaration of `HybridLocationResultSpec` to properly resolve imports.
namespace margelo::nitro::nitro_location { class HybridLocationResultSpec; }
// Forward declaration of `HybridLocationResultSpecSwift` to properly resolve imports.
namespace margelo::nitro::nitro_location { class HybridLocationResultSpecSwift; }
// Forward declaration of `Accuracy` to properly resolve imports.
namespace margelo::nitro::nitro_location { enum class Accuracy; }

#include <future>
#include <memory>
#include "HybridLocationResultSpec.hpp"
#include <NitroModules/PromiseHolder.hpp>
#include "HybridLocationResultSpecSwift.hpp"
#include <optional>
#include "Accuracy.hpp"

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroLocation-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitro_location {

  /**
   * The C++ part of HybridLocationSpecCxx.swift.
   *
   * HybridLocationSpecSwift (C++) accesses HybridLocationSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridLocationSpecCxx can directly inherit from the C++ class HybridLocationSpec
   * to simplify the whole structure and memory management.
   */
  class HybridLocationSpecSwift final: public HybridLocationSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridLocationSpecSwift(const NitroLocation::HybridLocationSpecCxx& swiftPart):
      HybridObject(HybridLocationSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroLocation::HybridLocationSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::future<std::shared_ptr<margelo::nitro::nitro_location::HybridLocationResultSpec>> getCurrentPosition(std::optional<Accuracy> accuracy) override {
      auto __result = _swiftPart.getCurrentPosition(accuracy);
      return __result.getFuture();
    }

  private:
    NitroLocation::HybridLocationSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::nitro_location
