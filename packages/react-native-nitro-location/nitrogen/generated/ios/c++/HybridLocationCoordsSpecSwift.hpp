///
/// HybridLocationCoordsSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridLocationCoordsSpec.hpp"

// Forward declaration of `HybridLocationCoordsSpecCxx` to properly resolve imports.
namespace NitroLocation { class HybridLocationCoordsSpecCxx; }



#include <optional>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroLocation-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitro_location {

  /**
   * The C++ part of HybridLocationCoordsSpecCxx.swift.
   *
   * HybridLocationCoordsSpecSwift (C++) accesses HybridLocationCoordsSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridLocationCoordsSpecCxx can directly inherit from the C++ class HybridLocationCoordsSpec
   * to simplify the whole structure and memory management.
   */
  class HybridLocationCoordsSpecSwift final: public HybridLocationCoordsSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridLocationCoordsSpecSwift(const NitroLocation::HybridLocationCoordsSpecCxx& swiftPart):
      HybridObject(HybridLocationCoordsSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroLocation::HybridLocationCoordsSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline std::optional<double> getAccuracy() noexcept override {
      auto result = _swiftPart.getAccuracy();
      return result;
    }
    inline std::optional<double> getAltitude() noexcept override {
      auto result = _swiftPart.getAltitude();
      return result;
    }
    inline double getLatitude() noexcept override {
      return _swiftPart.getLatitude();
    }
    inline double getLongitude() noexcept override {
      return _swiftPart.getLongitude();
    }

  public:
    // Methods
    

  private:
    NitroLocation::HybridLocationCoordsSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::nitro_location
